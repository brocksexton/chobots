package com.kavalok.monitor.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;

import org.red5.threadmonitoring.ThreadMonitorServices;

public class Statement implements java.sql.Statement {
  private java.sql.Statement wrapper;

  public Statement(java.sql.Statement wrapperStatement) {
    this.wrapper = wrapperStatement;
  }

  public void addBatch(String sql) throws SQLException {
    wrapper.addBatch(sql);
  }

  public void cancel() throws SQLException {
    wrapper.cancel();
  }

  public void clearBatch() throws SQLException {
    wrapper.clearBatch();
  }

  public void clearWarnings() throws SQLException {
    wrapper.clearWarnings();
  }

  public void close() throws SQLException {
    wrapper.close();
  }

  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    ThreadMonitorServices.setJobDetails("executing sql {0} autoGeneratedKeys {1}", sql, autoGeneratedKeys);
    return wrapper.execute(sql, autoGeneratedKeys);
  }

  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    ThreadMonitorServices.setJobDetails("executing sql {0} columnIndexes {1}", sql, columnIndexes);
    return wrapper.execute(sql, columnIndexes);
  }

  public boolean execute(String sql, String[] columnNames) throws SQLException {
    ThreadMonitorServices.setJobDetails("executing sql {0} columnNames {1}", sql, columnNames);
    return wrapper.execute(sql, columnNames);
  }

  public boolean execute(String sql) throws SQLException {
    ThreadMonitorServices.setJobDetails("executing sql {0}", sql);
    return wrapper.execute(sql);
  }

  public int[] executeBatch() throws SQLException {
    ThreadMonitorServices.setJobDetails("executing executeBatch");
    return wrapper.executeBatch();
  }

  public ResultSet executeQuery(String sql) throws SQLException {
    ThreadMonitorServices.setJobDetails("executeQuery sql {0}", sql);
    return wrapper.executeQuery(sql);
  }

  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    ThreadMonitorServices.setJobDetails("executeUpdate sql {0} autoGeneratedKeys {1}", sql, autoGeneratedKeys);
    return wrapper.executeUpdate(sql, autoGeneratedKeys);
  }

  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    ThreadMonitorServices.setJobDetails("executeUpdate sql {0} columnIndexes {1}", sql, columnIndexes);
    return wrapper.executeUpdate(sql, columnIndexes);
  }

  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    ThreadMonitorServices.setJobDetails("executeUpdate sql {0} columnNames {1}", sql, columnNames);
    return wrapper.executeUpdate(sql, columnNames);
  }

  public int executeUpdate(String sql) throws SQLException {
    ThreadMonitorServices.setJobDetails("executeUpdate sql {0}", sql);
    return wrapper.executeUpdate(sql);
  }

  public Connection getConnection() throws SQLException {
    return wrapper.getConnection();
  }

  public int getFetchDirection() throws SQLException {
    return wrapper.getFetchDirection();
  }

  public int getFetchSize() throws SQLException {
    return wrapper.getFetchSize();
  }

  public ResultSet getGeneratedKeys() throws SQLException {
    return wrapper.getGeneratedKeys();
  }

  public int getMaxFieldSize() throws SQLException {
    return wrapper.getMaxFieldSize();
  }

  public int getMaxRows() throws SQLException {
    return wrapper.getMaxRows();
  }

  public boolean getMoreResults() throws SQLException {
    return wrapper.getMoreResults();
  }

  public boolean getMoreResults(int current) throws SQLException {
    return wrapper.getMoreResults(current);
  }

  public int getQueryTimeout() throws SQLException {
    return wrapper.getQueryTimeout();
  }

  public ResultSet getResultSet() throws SQLException {
    return wrapper.getResultSet();
  }

  public int getResultSetConcurrency() throws SQLException {
    return wrapper.getResultSetConcurrency();
  }

  public int getResultSetHoldability() throws SQLException {
    return wrapper.getResultSetHoldability();
  }

  public int getResultSetType() throws SQLException {
    return wrapper.getResultSetType();
  }

  public int getUpdateCount() throws SQLException {
    return wrapper.getUpdateCount();
  }

  public SQLWarning getWarnings() throws SQLException {
    return wrapper.getWarnings();
  }

  public boolean isClosed() throws SQLException {
    return wrapper.isClosed();
  }

  public boolean isPoolable() throws SQLException {
    return wrapper.isPoolable();
  }

  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return wrapper.isWrapperFor(iface);
  }

  public void setCursorName(String name) throws SQLException {
    wrapper.setCursorName(name);
  }

  public void setEscapeProcessing(boolean enable) throws SQLException {
    wrapper.setEscapeProcessing(enable);
  }

  public void setFetchDirection(int direction) throws SQLException {
    wrapper.setFetchDirection(direction);
  }

  public void setFetchSize(int rows) throws SQLException {
    wrapper.setFetchSize(rows);
  }

  public void setMaxFieldSize(int max) throws SQLException {
    wrapper.setMaxFieldSize(max);
  }

  public void setMaxRows(int max) throws SQLException {
    wrapper.setMaxRows(max);
  }

  public void setPoolable(boolean poolable) throws SQLException {
    wrapper.setPoolable(poolable);
  }

  public void setQueryTimeout(int seconds) throws SQLException {
    wrapper.setQueryTimeout(seconds);
  }

  public <T> T unwrap(Class<T> iface) throws SQLException {
    return wrapper.unwrap(iface);
  }
}
