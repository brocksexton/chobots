package com.kavalok.admin.users{	import com.kavalok.Global;	import com.kavalok.admin.users.events.ShowFamilyEvent;	import com.kavalok.dto.UserTO;	import com.kavalok.dto.CharTO;	import com.kavalok.gameplay.LocalSettings;	import com.kavalok.admin.controls.DateTimeChooser;	import com.kavalok.services.AdminService;	import com.kavalok.char.CharModels;	import com.kavalok.services.MessageService;	import com.kavalok.services.LoginService;	import com.kavalok.services.LogService;		import flash.events.MouseEvent;		import mx.containers.VBox;	import mx.controls.Button;	import mx.controls.CheckBox;	import mx.controls.ComboBox;	import mx.controls.DateField;	import mx.controls.TextInput;	import mx.controls.TextArea;	import mx.controls.Alert;		[Event(name="showFamily", type="com.kavalok.admin.users.events.ShowFamilyEvent")]	public class UserViewBase extends VBox	{		private var _user:UserTO;		[Bindable]		public function get user():UserTO		{			return _user;		}		public function set user(value:UserTO):void		{			_user = value;			refresh();		}				[Bindable]		public var chatEnabledCheckBox : CheckBox;		[Bindable]		public var pictureChatCheckBox : CheckBox;		[Bindable]		public var chatEnabledByParentCheckBox : CheckBox;		[Bindable]		public var activatedCheckBox : CheckBox;		[Bindable]		public var agentCheckBox : CheckBox;		[Bindable]		public var banedCheckBox : CheckBox;		[Bindable]		public var artistCheckBox : CheckBox;		[Bindable]		public var drawEnabledCheckBox : CheckBox;		[Bindable]		public var banReasonTextInput : TextInput;		[Bindable]		public var modMsgInput : TextInput;			[Bindable]		public var statusInput : TextInput;		[Bindable]		public var charInfoTextInput : TextArea;		[Bindable]		public var banDateField : DateField;		[Bindable]		public var banDateButton : Button;		[Bindable]		public var permissionLevel : int;		[Bindable]		protected var changed : Boolean;		//[Bindable] public var charModelView:CharModelView;		[Bindable]		public var banChooser : DateTimeChooser;		public function UserViewBase()		{			super();			refresh();		}				private function refresh():void		{			enabled = Boolean(user);			//banChooser.value = user.timeBan;		//	if(enabled)		//	cModel();		}		private function cModel():void		{			//if(user){			//charModelView.char = user.login.toString();			//charModelView.initLol();			//}		}				protected function onShowFamilyClick(event : MouseEvent):void		{			dispatchEvent(new ShowFamilyEvent(user.email));		}				protected function onDisableChat(periodNumber:int):void		{			user.banCount = periodNumber;			new AdminService().setDisableChatPeriod(user.userId, periodNumber);			if(periodNumber != 0){			new LogService().adminLog("Banned chat of " + user.login + " for " + (periodNumber == 1 ? "5 minutes" : periodNumber == 2 ? "15 minutes" : periodNumber == 3 ? "12 hours" : periodNumber == 4 ? "24 hours" : "unknown"), 1, "user");			new MessageService().modAction(Global.panelName, "Banned chat of " + user.login + " for " + (periodNumber == 1 ? "5 minutes" : periodNumber == 2 ? "15 minutes" : periodNumber == 3 ? "12 hours" : periodNumber == 4 ? "24 hours" : "unknown"), Global.getPanelDate());			} else {			new LogService().adminLog("Revoked chat ban of " + user.login, 1, "user");			new MessageService().modAction(Global.panelName, "Revoked chat ban of " + user.login, Global.getPanelDate());		}		}				private function onBanDateResult(result:Object):void		{			banDateButton.enabled = true;		}				protected function onSendRulesClick(event : MouseEvent) : void		{			new AdminService().sendRules(user.userId);			new MessageService().modAction(Global.panelName, "Sent rules to " + user.login, Global.getPanelDate());			new LogService().adminLog("Sent rules to " + user.login, 1, "user");		}				protected function onModMsgClick(event : MouseEvent) : void		{    		new AdminService().sendModMessage(user.userId, modMsgInput.text);    		new MessageService().modAction(Global.panelName, "Sent mod message to " + user.login, Global.getPanelDate());    		new LogService().adminLog("Sent mod message to " + user.login + " saying: " + modMsgInput.text, 1, "user");		}				protected function onKickOutClick(event : MouseEvent) : void		{			new AdminService().kickOut(user.userId, false);			new MessageService().modAction(Global.panelName, "Kicked out " + user.login, Global.getPanelDate());			new LogService().adminLog("Kicked out " + user.login, 1, "user");		}				protected function onSendMailClick(event : MouseEvent) : void		{			new LogService().adminLog("Sent activation mail to " + user.login, 1, "user");			new LoginService().sendActivationMail(Global.startupInfo.redirectURL || "", user.login, user.locale || LocalSettings.DEFAULT_LOCALE);		}				protected function onSaveClick(event : MouseEvent) : void		{			changed = false;			new AdminService().saveUserData(				user.userId,				activatedCheckBox.selected,				chatEnabledCheckBox.selected,				chatEnabledByParentCheckBox.selected,				agentCheckBox.selected,				user.baned,				drawEnabledCheckBox.selected,				artistCheckBox.selected,				newStatus,				pictureChatCheckBox.selected);			new MessageService().modAction(Global.panelName, "Changed properties of " + user.login, Global.getPanelDate());			new LogService().adminLog("Modified user " + user.login, 1, "user");		}				protected function onUnBanClick(event : MouseEvent) : void		{			user.baned = false;			new AdminService().saveUserBan(user.userId, false, banReasonTextInput.text);			new MessageService().modAction(Global.panelName, "Unbanned " + user.login, Global.getPanelDate());			new LogService().adminLog("Unbanned " + user.login, 1, "user");		}		protected function onUnBanIPClick(event : MouseEvent) : void		{			user.ipBaned = false;			new AdminService().saveIPBan(user.ip, false, banReasonTextInput.text);			new LogService().adminLog("Unbanned IP " + user.ip + " of " + user.login, 1, "user");			new MessageService().modAction(Global.panelName, "Unbanned IP " + user.ip + " of " + user.login, Global.getPanelDate());		}		protected function onBanClick(event : MouseEvent) : void		{			if(!user.baned){			user.baned = true;			new AdminService().saveUserBan(user.userId, true, banReasonTextInput.text);			new AdminService(onSaveUserBan).getUser(user.userId);			banReasonTextInput.text = "";			new MessageService().modAction(Global.panelName, "Banned " + user.login + " because " + banReasonTextInput.text, Global.getPanelDate());			new LogService().adminLog("Banned " + user.login, 1, "user");			} else {				user.baned = false;			new AdminService().saveUserBan(user.userId, false, banReasonTextInput.text);			new LogService().adminLog("Unbanned " + user.login, 1, "user");			new MessageService().modAction(Global.panelName, "Unbanned " + user.login, Global.getPanelDate());			}		}		protected function onSaveCharClick(event : MouseEvent) : void		{			new AdminService().saveCharInfo(user.userId, charInfoTextInput.text);			new LogService().adminLog("Changed user info of " + user.login, 1, "user");			new MessageService().modAction(Global.panelName, "Updated user notes of " + user.login, Global.getPanelDate());			new AdminService(onSaveUserBan).getUser(user.userId);			charInfoTextInput.text = "";		}		private function get newStatus():String		{			if (statusInput.text.length < 1)			return "default";			else			return statusInput.text;		}		protected function onBanIPClick(event : MouseEvent) : void		{			if(!user.ipBaned){			user.ipBaned = true;			new AdminService().saveIPBan(user.ip, true, banReasonTextInput.text);			new AdminService(onSaveUserBan).getUser(user.userId);			banReasonTextInput.text = "";			new MessageService().modAction(Global.panelName, "Banned IP " + user.ip + " of " + user.login, Global.getPanelDate());			new LogService().adminLog("Banned IP " + user.ip + " of " + user.login, 1, "user");			} else {			user.ipBaned = false;				new LogService().adminLog("Unbanned IP " + user.ip + " of " + user.login, 1, "user");				new MessageService().modAction(Global.panelName, "Unbanned IP " + user.ip + " of " + user.login, Global.getPanelDate());			new AdminService().saveIPBan(user.ip, false, banReasonTextInput.text);			}		}				protected function onSaveUserBan(result : Object) : void		{			if(result!=null)				user = UserTO(result);		}				protected function onDeleteClick(event : MouseEvent) : void		{			new AdminService().deleteUser(user.userId);			new AdminService(onSaveUserBan).getUser(user.userId);			new AdminService().saveUserBan(user.userId, true, banReasonTextInput.text);				new LogService().adminLog("Disabled user " + user.login, 1, "user");		}		protected function onTimedBanClick(event:MouseEvent):void		{			var banDate : Date = toUTC(banChooser.value);			new AdminService().saveUserTimeBan(user.userId, true, banReasonTextInput.text, banDate);			new MessageService().modAction(Global.panelName, "Temp-banned " + user.login + " because " + banReasonTextInput.text, Global.getPanelDate());				new LogService().adminLog("Temp-banned user " + user.login + " until " + toUTC(banChooser.value), 1, "user");				banReasonTextInput.text = "";				Alert.show('User has been temporarily banned.');		}				private function toUTC(value : Date) : Date		{			return new Date(value.time - value.timezoneOffset * 60 * 1000);		}		protected function onRestoreClick(event : MouseEvent) : void		{			user.baned=false;			new AdminService().restoreUser(user.userId);			new AdminService(onSaveUserBan).getUser(user.userId);			new AdminService().saveUserBan(user.userId, false, banReasonTextInput.text);				new LogService().adminLog("Restored user " + user.login, 1, "user");		}								}}