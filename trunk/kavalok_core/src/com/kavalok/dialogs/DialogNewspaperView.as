package com.kavalok.dialogs{	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.MouseEvent;	import flash.text.TextField;	import com.kavalok.Global;	import com.kavalok.events.EventSender;	import com.kavalok.services.AdminService;	import flash.net.URLRequest;	import com.kavalok.char.Char;	import com.kavalok.char.CharModel;	import flash.events.Event;	import com.kavalok.services.CharService;	import flash.display.DisplayObject;	import com.kavalok.gameplay.windows.ShowCharViewCommand;	import com.kavalok.gameplay.commands.RetriveStuffCommand;	import com.kavalok.utils.GraphUtils;	import flash.display.Sprite;	import flash.system.Security;	import com.kavalok.gameplay.ToolTips;	import com.kavalok.utils.Maths;		public class DialogNewspaperView extends DialogViewBase	{		public var lottoButton:SimpleButton;		public var spinButton:SimpleButton;		public var vaultButton:SimpleButton;		public var closingButton : SimpleButton;		public var monthButton:SimpleButton;		public var claimButton1:SimpleButton;		public var claimButton2:SimpleButton;        public var claimButton3:SimpleButton;		public var expButton:SimpleButton;		public var bankButton:SimpleButton;		public var bugsButton:SimpleButton;		public var seasonButton:SimpleButton;		private var info:Array = new Array();		private var amountNeeded:Array = new Array();		private var charName:Array = new Array();		private var highestScore:Array = new Array();		private var chaType:Array = new Array();		private var active:Array = new Array();		private var _time:Date;		public var amountNeeded_1:TextField;		public var amountNeeded_2:TextField;		public var amountNeeded_3:TextField;		public var name_1:TextField;		public var name_2:TextField;		public var name_3:TextField;		private var _model:CharModel;		public var _mask:DisplayObject;		public var info_1:TextField;		public var info_2:TextField;		public var claimed1:Sprite;		public var claimed2:Sprite;		public var claimed3:Sprite;		public var agentSign:Sprite;		public var passportSign:Sprite;		public var charZone:Sprite;		public var info_3:TextField;		public var featuredUser:String = "user";		public var featuredText:TextField;		public var information:TextField;		public var _giveawayItem:String = "item";		private var featuredItem:Array;		private var _ok : EventSender = new EventSender();				public function DialogNewspaperView(text:String = null, okVisible : Boolean = true, content : MovieClip = null, modal : Boolean = false)		{			Security.allowDomain('*');						super(content || new DialogNewspaper(), text, modal);			Global.charManager.refreshChecks();			agentSign.visible=false;			passportSign.visible = false;			lottoButton.addEventListener(MouseEvent.CLICK, onLottoClick);
			lottoButton.visible = true;			spinButton.addEventListener(MouseEvent.CLICK, onSpinClick);			spinButton.visible = false;			vaultButton.visible = false;			claimed1.visible = false;			claimed2.visible = false;			claimed3.visible = false;			name_1.visible = false;			name_2.visible = false;			name_3.visible = false;			closingButton.addEventListener(MouseEvent.CLICK, onCloseClick);			claimButton1.addEventListener(MouseEvent.CLICK,onClaimClick1);			claimButton2.addEventListener(MouseEvent.CLICK,onClaimClick2);			claimButton3.addEventListener(MouseEvent.CLICK,onClaimClick3);			monthButton.addEventListener(MouseEvent.CLICK,onMonthClick);			bankButton.addEventListener(MouseEvent.CLICK,onBankClick);			seasonButton.addEventListener(MouseEvent.CLICK,onSeasonClick);			monthButton.visible = false;			GraphUtils.setBtnEnabled(claimButton1, false);			GraphUtils.setBtnEnabled(claimButton2, false);			GraphUtils.setBtnEnabled(claimButton3, false);			_time = Global.getServerTime();			if(day == "01" || day == "08" || day == "15" || day == "22" || day == "29") {				ToolTips.registerObject(bugsButton,"Bugs multiplier event has started!");				GraphUtils.setBtnEnabled(bugsButton,true);			} else { 				ToolTips.registerObject(bugsButton,"Bugs multiplier event has ended! Check again later!");				bugsButton.visible = true;				bugsButton.alpha = 0.3;			}						if(day == "02" || day =="09" || day == "16" || day == "23" || day == "30")			{				ToolTips.registerObject(expButton,"Exp multiplier event has started!");				GraphUtils.setBtnEnabled(expButton,true);			} else {				ToolTips.registerObject(expButton,"Exp multiplier event has ended! Check again later!");				expButton.visible = true;				expButton.alpha = 0.3;			}					new AdminService(onGetInformation).getChallenges();			Global.isLocked = true;			_model = new CharModel();			_model.refresh();			charZone.addChild(_model);			GraphUtils.fitToObject(_model, charZone);			charZone.addEventListener(MouseEvent.CLICK, onCharZoneClick);		}		private function onClaimClick1(e:MouseEvent) : void		{			if(Global.charManager.challenges.indexOf(chaType[1] + ";") != -1)	{				Dialogs.showOkDialog("Already redeemed, wait until next week!");			} else {				GraphUtils.setBtnEnabled(claimButton1, false);				Global.charManager.challenges = Global.charManager.challenges + chaType[1] + ";";				new CharService().checkChallenge(Global.charManager.userId, Global.charManager.check1, chaType[1]);				Dialogs.showOkDialog("Well done! You've been awarded 20,000 bugs for completing a challenge");			}		}				private function onClaimClick2(e:MouseEvent) : void		{			if(Global.charManager.challenges.indexOf(chaType[2] + ";") != -1)	{				Dialogs.showOkDialog("Already redeemed, wait until next week!");			} else {				GraphUtils.setBtnEnabled(claimButton2, false);				Global.charManager.challenges = Global.charManager.challenges + chaType[2] + ";";				new CharService().checkChallenge(Global.charManager.userId,Global.charManager.check2,chaType[2]);				Dialogs.showOkDialog("Well done! You've been awarded 20,000 bugs for completing a challenge");			}		}				private function onClaimClick3(e:MouseEvent) : void		{			if(Global.charManager.challenges.indexOf(chaType[3] + ";") != -1)	{				Dialogs.showOkDialog("Already redeemed, wait until next week!");			} else {				GraphUtils.setBtnEnabled(claimButton3, false);				Global.charManager.challenges = Global.charManager.challenges + chaType[3] + ";";				new CharService().checkChallenge(Global.charManager.userId,Global.charManager.check3,chaType[3]);				Dialogs.showOkDialog("Well done! You've been awarded 20,000 bugs for completing a challenge");			}		}				private function onMonthClick(e:MouseEvent) : void		{			var command:RetriveStuffCommand = null;			if(!Global.charManager.stuffs.stuffExists(_giveawayItem) != true) {				Dialogs.showOkDialog("Already redeemed, more coming soon!");			} else {				if(!Global.stuffsLoaded) { 					Dialogs.showOkDialog("Please wait a few moments for the game to finish loading before retrieving item.",true);						return;				}				Dialogs.showOkDialog("Item redeemed, more coming soon!");				new RetriveStuffCommand(_giveawayItem,"Month item",Maths.random(16777215)).execute();			}		}				private function onSeasonClick(e:MouseEvent) : void		{			Dialogs.showSeasonDialog();		}				private function onBankClick(e:MouseEvent) : void		{			Dialogs.showBankDialog(Global.charManager.charId + "\'s Bank Account");		}				private function onCharZoneClick(e:MouseEvent):void		{			var command:ShowCharViewCommand = new ShowCharViewCommand(featuredUser, _model.char.userId);			command.execute();		}		private function onLottoClick(e:MouseEvent):void		{			Dialogs.showLottoDialog("The Daily Draw");		}				private function onSpinClick(e:MouseEvent):void		{			Dialogs.showSpinDialog();		}		 public function get day() : String		{			var day:String = _time.getDate() < 10?"0" + _time.getDate().toString():_time.getDate().toString();			return day;		}				private function formatNum(val:Number) : String		{			var numtoString:* = new String();			var numLength:Number = val.toString().length;			numtoString = "";			for(var i:int = 0; i < numLength; i++)			{				if((numLength - i) % 3 == 0 && i != 0)				{					numtoString = numtoString + ",";				}				numtoString = numtoString + val.toString().charAt(i);			}			return numtoString;		}				private function onCharInfo(result:Object):void		{			if (result)				_model.char = new Char(result);				agentSign.visible = _model.char.isAgent;				passportSign.visible = _model.char.isCitizen;		}		protected function updateCharModel(e:Event = null):void		{			_model.char.id = featuredUser;			new CharService(onCharInfo).getCharViewLogin(featuredUser);			featuredText.text = featuredUser;		}				private function onGetInformation(result:Array):void		{			//result.sort(  Array.NUMERIC );			result.sortOn( ["active"], [Array.NUMERIC]); 			for each(var challenges:Object in result)			{				info.push(challenges.info.toString());				amountNeeded.push(challenges.amountNeeded.toString());				highestScore.push(challenges.highestScore.toString());				charName.push(challenges.charName.toString());				chaType.push(challenges.type.toString());				active.push(challenges.active);			}			Global.isLocked = false;			_giveawayItem = amountNeeded[0].toString();			featuredUser = charName[0].toString();			information.text = info[0].toString();						if(active[1]) {				info_1.text = info[1].toString();				name_1.text = charName[1].toString();				amountNeeded_1.text = formatNum(Global.charManager.check1) + "/" + formatNum(amountNeeded[1].toString());				if(Global.charManager.challenges.indexOf(chaType[1]) < 0) {					if(Global.charManager.check1 >= Number(amountNeeded[1].toString())) {						GraphUtils.setBtnEnabled(claimButton1, true);					}				} else { 					claimed1.visible = true;				}			} else {				info_1.visible = false;				name_1.visible = false;				amountNeeded_1.visible = false;				claimButton1.visible = false;			}						if(active[2]) {				info_2.text = info[2].toString();				name_2.text = charName[2].toString();				amountNeeded_2.text = formatNum(Global.charManager.check2) + "/" + formatNum(amountNeeded[2].toString());				if(Global.charManager.challenges.indexOf(chaType[2]) < 0) {					if(Global.charManager.check2 >= Number(amountNeeded[2].toString())) {						GraphUtils.setBtnEnabled(claimButton2, true);					}				} else { 					claimed2.visible = true;				}			} else {				info_2.visible = false;				name_2.visible = false;				amountNeeded_2.visible = false;				claimButton2.visible = false;			}						if(active[3]) {				info_3.text = info[3].toString();				name_3.text = charName[3].toString();				amountNeeded_3.text = formatNum(Global.charManager.check3) + "/" + formatNum(amountNeeded[3].toString());				if(Global.charManager.challenges.indexOf(chaType[3]) < 0) {					if(Global.charManager.check3 >= Number(amountNeeded[3].toString())) {						GraphUtils.setBtnEnabled(claimButton3, true);					}				} else { 					claimed3.visible = true;				}			} else {				info_3.visible = false;				name_3.visible = false;				amountNeeded_3.visible = false;				claimButton3.visible = false;			}						updateCharModel();		}				protected function onCloseClick(event : MouseEvent = null) : void		{			hide();		}	}}