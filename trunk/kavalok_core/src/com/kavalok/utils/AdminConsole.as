package com.kavalok.utils{	import com.junkbyte.console.Cc;	import com.kavalok.Global;	import com.kavalok.char.LocationChar;	import com.kavalok.StartupInfo;	import com.kavalok.char.Char;	import com.kavalok.char.actions.CharPropertyAction;	import com.kavalok.char.actions.CharsModifierAction;	import com.kavalok.char.actions.CharsPropertyAction;	import com.kavalok.dialogs.Dialogs;	import com.kavalok.char.actions.LoadExternalContent;	import com.kavalok.constants.Modules;	import com.kavalok.commands.char.GetCharCommand;    import com.kavalok.commands.location.GotoLocationCommand;	import com.kavalok.gameplay.KavalokConstants;	import com.kavalok.gameplay.windows.CharWindowView;	import com.kavalok.gameplay.windows.TradeWindowView;	import com.kavalok.gameplay.frame.MessageWindowView;	import com.kavalok.utils.Strings;	import com.kavalok.utils.URLUtil;	import com.kavalok.char.actions.LocationPropertyAction;	import com.kavalok.char.actions.PropertyActionBase;	import com.kavalok.location.LocationBase;	import com.kavalok.location.commands.FlyingPromoCommand;	import com.kavalok.location.commands.MoveToLocCommand;	import com.kavalok.dto.stuff.StuffTypeTO;	import com.kavalok.gameplay.windows.ShowCharViewCommand;	import com.kavalok.location.commands.MoveToLocationCommand;	import com.kavalok.location.commands.StuffRainCommand;	import com.kavalok.RankType;	import com.kavalok.services.AdminService;	import com.kavalok.services.CharService;	import com.kavalok.services.StuffServiceNT;	import com.kavalok.services.LogService;	import com.kavalok.ui.Window;		public class AdminConsole	{		public static var roomList:Array = new Array ("locShopColor","locRadio", "locSecret2", "locSecret3", "locWut", "loc0", "loc1", "loc2", "loc3", "loc5", "loc6", "loc7", "loc8", "loc9", "loc10", "loc11", "loc12", "loc13",  "loc32", "locAcademy", "locAcademyRoom", "locAccShop", "locAgents", "locationRope", "locBeach", "locBuilding", "locCafe", "locChlos", "locCinema", "locCircus", "locCitizen", "locColor", "locDisco", "locDudes", "locEco", "locEcoShop", "locFashion", "locForest", "locGames", "locGirls", "locGraphity", "locGraphityA", "locGraphityM", "locHome", "locHomeShop", "locKongregateSweetBattle", "locMagicShop", "locMissions", "locMusic", "locMusicStage", "locNichos", "locNichos1", "locNichos2", "locNichos3", "locNichos4", "locNichos5", "locNichos6", "locNichos7", "locNichos8", "locPark", "locPark_autumn", "locPark_spring", "locParty", "locRobots", "locSanta", "locSecret", "locSpace", "locStaff", "locTesting", "locWinterPark", "missionFarm", "missionNichos");	    private var modifierList:Array = new Array ("BevelModifier", "BigHeadModifier", "BlendModifier", "BlufModifier", "BoardModifier", "DanceModifier", "FlameModifier", "FlyModifier", "GhostModifier", "HueModifier", "InvertModifier", "MoonwalkModifier", "PromoModifier", "RotModifier", "SaturationModifier", "Scale2Modifier", "Scale4Modifier", "ScaleModifier", "SmallHeadModifier", "SpeedModifier", "StuffModifier", "TeleportModifier", "ToxicModifier", "ToxicPink", "ToxicRed", "ToxicYellow");		private var _window:CharWindowView;		private var _char:Char;		private var _hisName:String;		private var _rainName:String;		private static const REMOTE_ID_FORMAT : String = "trade|{0}|{1}";		private var _muteRoom:String;		 public function AdminConsole()		{		  StuffTypeTO.initialize();		}				public function process(message:String, limited:Boolean = false):void		{			var commands:Array = message.split(';');			for each (var command:String in commands)			{			if (Global.charManager.isStaff == true || limited){					processCommand(message, limited);					} else {						Dialogs.showOkDialog("I'm sorry, Dave. I'm afraid I can't do that.", true);					}				}			}	private function processCommand(command:String, limited:Boolean):void	{		var tokens:Array = command.split(' ');		var methodName:String = String(tokens[0]).substr(1);		tokens.splice(0, 1);		//#goto		if(command.substr(0, 5) != '#goto' && limited){			Cc.info("Command -> " + command.substr(0, 5));			Dialogs.showOkDialog("I'm sorry, Dave. I'm afraid I can't do that.", true);		} else{			var method:Function = this[methodName];			method.apply(this, tokens);		}	}		private function randomIntBT(min:int, max:int):int {        return Math.round(Math.random() * (max - min) + min);        }				public function get(charId:String):void		{				new GetCharCommand(charId, 0, onViewComplete).execute();				_hisName = charId;		}		public function shop(shopName:String):void		{			Global.moduleManager.loadModule(Modules.STUFF_CATALOG, {shop : shopName, countVisible : true});		}				public function dialog(lol:String):void		{			Dialogs.showBankDialog("");		}				public function rain(name:String):void		{		   _rainName = name;		   new StuffServiceNT(stuffResult).getStuffType(name);		}				/*public function moveTo(locId:String):void		{  		   if(roomList.indexOf(locId, 0) != -1){			var command:MoveToLocationCommand = new MoveToLocationCommand();			command.locId = locId;			location.sendCommand(command);		   }else{		    //Dialogs.showOkDialog("The entered room does not exist!", true);		   }		}*/				public function kick(sender:GetCharCommand):void		{		  _char = sender.char;		  if(_char.userId > 1){		  var chars:Object = location.chars;		  var charList:String = "";		  for(var id:String in chars) {			charList += id + ",";          }		//	new AdminService().kickUserOut(_char.id, false);		  }else{			Dialogs.showOkDialog("That user does not exist!", true);		 }		}				public function goto(locName:String):void		{		    if(roomList.indexOf(locName, 0) != -1){			Global.moduleManager.loadModule(locName);		   }else{		    //Dialogs.showOkDialog("The entered room does not exist!", true);           }		}		public function moveTo(tokens:String):void		{		  if(tokens.indexOf("|", 0) != -1){		   var info:Array = tokens.split("|");		   trace("name: " + info[1] + " Length: " + info[1].length);		   var name:String = info[1].toString();		   new GetCharCommand(name, 0, onGetCMoveToHome).execute();		  }else{		   if(roomList.indexOf(tokens, 0) != -1){			 var command:MoveToLocationCommand = new MoveToLocationCommand();			 command.locId = tokens;			 location.sendCommand(command);		   }		  }		}				private function onGetCMoveToHome (sender:GetCharCommand):void		{		  _char = sender.char;		  if(_char.userId > 1){		  var chars:Object = location.chars;		  var charList:String = "";		  for(var id:String in chars) {          charList += id + ",";          }		  new AdminService().sendGlobalCommand(charList, "GoToLoc", "home", _char.id, _char.userId);		  }else{		  Dialogs.showOkDialog("That user does not exist!", true);		 }		}				public function grab(tokens:String):void		{		 var i:Array = tokens.split("|");		 if(roomList.indexOf(i[1], 0) != -1){		 new AdminService().sendGlobalCommand(i[0].toString(), "GoToLoc", i[1].toString(), i[1].toString(), 0);		 }else{		 Dialogs.showOkDialog("That Room does not exist.");		 }		}				public function trade(name:String):void		{		  new GetCharCommand(name, 0, onGetTrade).execute();		}				private function onGetTrade(sender:GetCharCommand):void		{          _char = sender.char;     	  var rnd : int = randomIntBT(100, 500);		  var rndT : int = randomIntBT(100, 500);		  var remoteId : String;		  remoteId = Strings.substitute(REMOTE_ID_FORMAT, Global.charManager.charId + rnd.toString(), _char.id + rndT.toString());		  TradeWindowView.showWindow(_char.id, _char.userId, true, remoteId);		}				public function mute(token:String):void		{				   _muteRoom = token;		   new AdminService(onGetRooms).getMutedRooms();		}				private function onGetRooms(sender:String):void		{		      if(roomList.indexOf(_muteRoom) != -1){		        if(sender == ""){		           var room:String = _muteRoom + ",";		           new AdminService().saveMutedRooms(room); 		           }else{		            var spl:Array = sender.split(",");		             if(spl.indexOf(_muteRoom) != -1){		             spl.splice(spl.indexOf(_muteRoom), 1);		            }		           var reum:String = spl.toString() + _muteRoom + ",";			       new AdminService().saveMutedRooms(reum);		        }		    }		}				public function unmute():void		{		   new AdminService().saveMutedRooms("");		}				public function mutedRooms():void		{		  new AdminService(onGetMROOMS).getMutedRooms();		}				private function onGetMROOMS(sender:String):void		{		  Dialogs.showOkDialog("List of Currently Muted Rooms: " + sender);		}				public function bubbleValue():void		{		  Dialogs.showOkDialog("Value: " + Global.bubbleValue.toString(), true);		}				private function stuffResult(result:StuffTypeTO):void		{		  if(result.fileName == ""){		  Dialogs.showOkDialog("That Item does not Exist!", true);		  }else{		  var command:StuffRainCommand = new StuffRainCommand();			command.itemId = result.id;			command.fileName = result.fileName;			command.stuffType = result.type;			Global.locationManager.location.sendCommand(command);		  }		}				/*public function get stuffType():StuffTypeTO		{			return StuffTypeTO(_rainName);		}*/				/*public function home(charName:String):void		{		//	new GetCharCommand(charName, 0, onGoHome).execute();		//	_hisName = charName;		//	trace("#" + _hisName + "#");		var parameters:Object = {remoteId: "home|" + charName + "|0"}		new GotoLocationCommand("home", parameters).execute();		}				private function onGoHome(sender:GetCharCommand):void		{			_char = sender.char;			if (_char && _char.id)			{				Global.moduleManager.loadModule(Modules.HOME, 				{charId : _hisName.toString(), userId : parseInt(_char.id)});					trace("going to: " + _hisName + ", " + _char.userId);			}		}*/			private function onViewComplete(sender:GetCharCommand):void			{					_char = sender.char;					if (_char && _char.id)					{					//	if (!_window)					//	{									var command:ShowCharViewCommand = new ShowCharViewCommand(_hisName, _char.userId);									command.execute();					//	}					//	else					//	{					//		_window.char = _char;					//	}					//	_window.refresh();					//	getOnlineInfo();					}			}				public function zach(mode:String):void		{			if (mode == 'on')				MoveDemChars.instance.started = true;			else if (mode == 'off')				MoveDemChars.instance.started = false;		}				public function reset():void		{			if (Global.locationManager.location)				Global.locationManager.location.sendResetObjectPositions();		}				public function spaceship(text:String):void		{			var command:FlyingPromoCommand = new FlyingPromoCommand();			command.text = text;			Global.locationManager.location.sendCommand(command);			}				public function swf(url:String):void		{			location.sendUserAction(LoadExternalContent, {url: url});		}				public function home(name:String):void		{		  new GetCharCommand(name, 0, onGetCHome).execute();		}				public function add(name:String):void		{		  //new AdminService(onGetResult).getUserIdByName(name);		  new GetCharCommand(name, 0, onGetResult).execute();		}						public function char(charId:String, token:String):void		{			var tokens:Array = token.split('=');						location.sendUserAction(CharPropertyAction,				{sender: userId, charId:charId, path: tokens[0], value: tokens[1]});		}				public function my(token:String):void		{			var tokens:Array = token.split('=');						location.sendUserAction(CharPropertyAction,				{sender: userId, charId:userId, path: tokens[0], value: tokens[1]});		}				public function modifier(className:String):void		{		 if(modifierList.indexOf(className, 0) != -1){			location.sendUserAction(CharsModifierAction, {sender: userId, className:className});		  }else{		   //Dialogs.showOkDialog("That Modifier Does Not Exist!", true);		 }		}				public function chars(token:String):void		{			var tokens:Array = token.split('=');						location.sendUserAction(CharsPropertyAction,				{sender: userId, path: tokens[0], value: tokens[1]});		}				private function onGetResult (sender:GetCharCommand):void 		{		    _char = sender.char;			new CharService().addToBuddyList(Global.charManager.userId, _char.userId);		}				private function onGetCHome (sender:GetCharCommand):void		{		  _char = sender.char;		  if(_char.userId > 1){		  var params:Object = new Object();          params.charId = _char.id;          params.userId = _char.userId;          new GotoLocationCommand("home", params).execute();		  }else{		  Dialogs.showOkDialog("That user does not exist!", true);		  }		}				public function loc(token:String):void		{			var tokens:Array = token.split('=');						location.sendUserAction(LocationPropertyAction,				{sender: userId, path: tokens[0], value: tokens[1]});		}				public function global(token:String):void		{			var tokens:Array = token.split('=');						location.sendUserAction(PropertyActionBase,				{sender: userId, path: tokens[0], value: tokens[1]});		}				public function get userId():String		{			 return Global.charManager.charId;		}				public function get location():LocationBase		{			 return LocationBase(Global.locationManager.reference.value);		}				public function get user():LocationChar		{			 return location.user;		}	}}