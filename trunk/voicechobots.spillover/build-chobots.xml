<project
	default="build-all-release">
	
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask">
        <classpath>
        	<pathelement location="${basedir}/kavalok-build/svnant.jar" />
            <pathelement location="${basedir}/kavalok-build/svnClientAdapter.jar" />
            <pathelement location="${basedir}/kavalok-build/svnjavahl.jar" />
            <pathelement location="${basedir}/kavalok-build/svnkit.jar" />
        </classpath>
    </taskdef>
	
    <available file=".git" type="dir" property="git.present"/>

	<target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
	    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
	        <arg value="describe"/>
	        <arg value="--tags"/>
	        <arg value="--always"/>
	        <arg value="HEAD"/>
	    </exec>
	    <condition property="repository.version" value="${git.revision}" else="unknown">
	        <and>
	            <isset property="git.revision"/>
	            <length string="${git.revision}" trim="yes" length="0" when="greater"/>
	        </and>
	    </condition>
	</target>


	<target name="get-svn-revision" depends="git.revision">
	 <!--  	<exec outputproperty="build.current.revision" executable="svnversion">
		         <arg line="-n -c" />
		         <redirector>
		           <outputfilterchain>
		             <tokenfilter>
		                 <replaceregex pattern="^[0-9]*:?" replace="" flags="g"/>
		             </tokenfilter>
		          </outputfilterchain>
		        </redirector>
		</exec>
		<exec outputproperty="build.current.version" executable="svn">
		  <arg line="info" />
		  <redirector>
		  <outputfilterchain>
		  <linecontainsregexp><regexp pattern="^URL:" /></linecontainsregexp>
		   <tokenfilter>
		     <replaceregex pattern=".*\/([^\/]+)$" replace="\1" flags="g"/>
		   </tokenfilter>
		  </outputfilterchain>
		</redirector>
		</exec> 
	-->

		<property name="full.build.version" value="${git.revision}" />
		<property name="build.current.version" value="${full.build.verison}" />
		<property name="svn.revision" value="${full.build.version}" />
		<property name="build.current.revision" value="${svn.revision}" />
		
		<echo>Building Version: ${svn.revision} to directory /var/www/game/${build.current.revision}</echo>
	</target>
	<target name="zip-build">
		<echo>Zipping : ${svn.revision}</echo>
		<zip destfile="${deploy.base.dir}/red5_data/${svn.revision}/webapps/kavalok.zip"
			   basedir="${deploy.base.dir}/red5_data/${svn.revision}/webapps/kavalok"
		  />		
		<zip destfile="${deploy.base.dir}/game/${svn.revision}.zip"
			   basedir="${deploy.base.dir}/game/${svn.revision}"
		  />		
	</target>
	<target name="create-database">
		<ant antfile="build-base.xml" taskname="create-database">
		</ant>
	</target>

	<target name="do-build" depends="get-svn-revision">
		<antcall target="get-svn-revision"/>
		<property name="red5.dir" value="${deploy.base.dir}/red5_data/${svn.revision}" />
		<property name="deploy.flash.dir" value="${deploy.base.dir}/game/${svn.revision}" />
		<echo>Red5 dir: ${red5.dir}</echo>
		<echo>Deploy flash dir: ${deploy.flash.dir}</echo>
		<ant antfile="build-base.xml" target="build-all-release">
		</ant>
	</target>

	<target name="build-all-release" depends="get-svn-revision">
		<property file="chobots.properties"/>
		<antcall target="do-build"/>
		<antcall target="zip-build"/>
		
		<echo>Deploy flash dir: ${deploy.flash.dir}</echo>
	</target>
	<target name="build-kavalok-release" depends="get-svn-revision">
		<property file="kavalok-release.properties"/>
		<antcall target="do-build"/>
	</target>

	<target name="build-all" depends="get-svn-revision">
		<property file="chobots.properties"/>
		<ant antfile="build-base.xml" target="build-all">
		</ant>
		<echo>Deploy flash dir: ${deploy.flash.dir}</echo>
	</target>
	<target name="build-flash" depends="get-svn-revision">
		<property file="chobots.properties"/>
		<ant antfile="build-base.xml" target="build-flash">
		</ant>
			<echo>Deploy flash dir: ${deploy.flash.dir}</echo>
	</target>
</project>